import time
from machine import ADC, Pin, deepsleep

# --- Configuration for Resilience ---

# A0 is typically represented by pin 0 for the ADC object on the NodeMCU ESP8266
ANALOG_PIN = 0
adc = ADC(ANALOG_PIN)

# Define the deep sleep duration in milliseconds. 
# 60000 ms = 60 seconds (a low duty cycle is key for power autonomy in SA farm context)[1]
SLEEP_TIME_MS = 60000 

def read_and_transmit_data():
    """
    Reads the LDR sensor and simulates data processing/transmission.
    """
    print("\n--- Starting Light Measurement Cycle ---")
    
    # Read the raw analog value (0 to 1024 on a standard ESP8266)
    light_value = adc.read()
    
    # --- Data Processing/Display ---
    print(f"Current Raw Light Level (A0): {light_value}")
    
    # In a full system, you would establish a Wi-Fi connection here and
    # use the MQTT protocol (which handles intermittent connections well) 
    # to publish this 'light_value' to your central server.
    
    print("Data transmitted via (Simulated) MQTT.")
    
    return light_value

# --- Main Program Logic ---

def main():
    # 1. Read all sensor data
    read_and_transmit_data()
    
    # 2. Enter Deep Sleep Mode
    print(f"Data collected. Entering Deep Sleep for {SLEEP_TIME_MS / 1000} seconds...")
    
    # This command drastically cuts power consumption, minimizing battery use.
    # CRITICAL: Ensure GPIO16 is connected to the RST pin for this timer-based wake-up to function.[2]
    deepsleep(SLEEP_TIME_MS) 

# Run the main function once. Deep Sleep will reset and re-run main() after the timer expires.
if __name__ == "__main__":
    main()
