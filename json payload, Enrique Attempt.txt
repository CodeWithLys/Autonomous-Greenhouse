/*
 * UNIFIED GREENHOUSE SENSOR MONITORING SYSTEM WITH API INTEGRATION
 * IFS325 Group Project - ARC Smart Agriculture
 * ESP32 Version - All Sensors with JSON POST to Oracle APEX
 * 
 * Sensors: BMP280, DHT22, Flame, LDR, MQ135, MQ2, MQ7
 * Features: WiFi connectivity, JSON payload creation, HTTP POST to API
 */

#include "Arduino.h"
#include <Wire.h>
#include <Adafruit_BMP280.h>
#include "DHT.h"
#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>

// ============ WiFi CREDENTIALS ============
const char* ssid = "2024";              // Replace with your WiFi SSID
const char* password = "2024@uwc";      // Replace with your WiFi password

// ============ API ENDPOINT ============
const char* serverURL = "https://apex.oracle.com/pls/apex/your_workspace/sensor-data";  // Replace with your actual API endpoint

// ============ PIN DEFINITIONS ============
// Environmental Sensors
#define FLAME_SENSOR_PIN 35      // Analog - Flame detection
#define DHT_PIN 16               // Digital - Temperature & Humidity
#define LDR_PIN 34               // Analog - Ambient light
#define DHTTYPE DHT22            // DHT22 sensor type

// I2C Sensors
#define SDA_PIN 21               // I2C SDA
#define SCL_PIN 22               // I2C SCL

// Gas Sensors (Analog)
#define MQ135_PIN 32             // Analog - CO2/Air Quality
#define MQ2_PIN 33               // Analog - LPG/Smoke
#define MQ7_PIN 39               // Analog - Carbon Monoxide

// ============ SENSOR OBJECT INITIALIZATION ============
Adafruit_BMP280 bmp;
DHT dht(DHT_PIN, DHTTYPE);

// ============ CALIBRATION & BASELINE VALUES ============
const float PRESSURE_NORMAL = 1013.25;
float baselinePressure = PRESSURE_NORMAL;
bool baselineSet = false;

int mq135_baseline = 0;
int mq2_baseline = 0;
int mq7_baseline = 0;
bool gas_sensors_calibrated = false;

const int FLAME_THRESHOLD = 2000;

// ============ TIMING VARIABLES ============
unsigned long lastReadTime = 0;
const long READ_INTERVAL = 10000;  // Read and send data every 10 seconds

// ============ SENSOR DATA STRUCTURE ============
struct SensorData {
  float temp_bmp280;
  float temp_dht22;
  float pressure;
  float altitude;
  float humidity;
  int flame_raw;
  int light_raw;
  int mq135_raw;
  int mq135_baseline;
  int mq135_drop;
  int mq2_raw;
  int mq2_baseline;
  int mq2_drop;
  int mq7_raw;
  int mq7_baseline;
  int mq7_drop;
  bool valid;
};

// ============ SETUP ============
void setup() {
  Serial.begin(115200);
  delay(1000);
  
  Serial.println("\n\n╔══════════════════════════════════════════════════════╗");
  Serial.println("║   GREENHOUSE SENSOR SYSTEM WITH API INTEGRATION      ║");
  Serial.println("║   IFS325 Group Project - ARC Smart Agriculture       ║");
  Serial.println("╚══════════════════════════════════════════════════════╝\n");
  
  // Initialize I2C for BMP280
  Wire.begin(SDA_PIN, SCL_PIN);
  
  // Initialize BMP280
  if (!bmp.begin(0x76)) {
    if (!bmp.begin(0x77)) {
      Serial.println("❌ BMP280 sensor not found!");
      while (1) delay(10);
    }
  }
  bmp.setSampling(Adafruit_BMP280::MODE_NORMAL,
                  Adafruit_BMP280::SAMPLING_X2,
                  Adafruit_BMP280::SAMPLING_X16,
                  Adafruit_BMP280::FILTER_X16,
                  Adafruit_BMP280::STANDBY_MS_500);
  Serial.println("✓ BMP280 initialized");
  
  // Initialize DHT22
  dht.begin();
  Serial.println("✓ DHT22 initialized");
  
  // Configure analog pins
  pinMode(FLAME_SENSOR_PIN, INPUT);
  pinMode(LDR_PIN, INPUT);
  pinMode(MQ135_PIN, INPUT);
  pinMode(MQ2_PIN, INPUT);
  pinMode(MQ7_PIN, INPUT);
  Serial.println("✓ Analog pins configured");
  
  // Connect to WiFi
  connectToWiFi();
  
  // Calibrate gas sensors
  Serial.println("\n╔══════════════════════════════════════════════════════╗");
  Serial.println("║           GAS SENSOR CALIBRATION PHASE               ║");
  Serial.println("╚══════════════════════════════════════════════════════╝");
  Serial.println("Ensuring all sensors are in CLEAN AIR environment...");
  Serial.println("Gas sensors warming up and calibrating (300 seconds)...\n");
  
  for (int i = 300; i > 0; i--) {
    if (i % 30 == 0) {
      Serial.print("Warming up: ");
      Serial.print(i);
      Serial.println(" seconds remaining...");
    }
    delay(1000);
  }
  
  calibrateGasSensors();
  
  Serial.println("\n╔══════════════════════════════════════════════════════╗");
  Serial.println("║        INITIALIZATION COMPLETE - MONITORING STARTED  ║");
  Serial.println("╚══════════════════════════════════════════════════════╝\n");
}

// ============ MAIN LOOP ============
void loop() {
  unsigned long currentTime = millis();
  
  // Check WiFi connection
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("⚠ WiFi disconnected. Reconnecting...");
    connectToWiFi();
  }
  
  // Read all sensors every READ_INTERVAL milliseconds
  if (currentTime - lastReadTime >= READ_INTERVAL) {
    lastReadTime = currentTime;
    
    Serial.println("\n╔══════════════════════════════════════════════════════╗");
    Serial.println("║              SENSOR READING CYCLE                    ║");
    Serial.print("║ Time: ");
    Serial.print(currentTime / 1000);
    Serial.println(" seconds                             ║");
    Serial.println("╚══════════════════════════════════════════════════════╝\n");
    
    // Read all sensors
    SensorData data = readAllSensors();
    
    if (data.valid) {
      // Create and send JSON payload
      String jsonPayload = createJSONPayload(data);
      Serial.println("\n📤 JSON PAYLOAD:");
      Serial.println(jsonPayload);
      
      // Send to API
      sendDataToAPI(jsonPayload);
    } else {
      Serial.println("❌ Sensor data invalid - skipping transmission");
    }
    
    Serial.println("\n════════════════════════════════════════════════════════\n");
  }
}

// ============ WiFi CONNECTION FUNCTION ============
void connectToWiFi() {
  Serial.print("Connecting to WiFi");
  WiFi.begin(ssid, password);
  
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 20) {
    delay(500);
    Serial.print(".");
    attempts++;
  }
  
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\n✓ WiFi connected");
    Serial.print("IP Address: ");
    Serial.println(WiFi.localIP());
  } else {
    Serial.println("\n❌ WiFi connection failed");
  }
}

// ============ READ ALL SENSORS FUNCTION ============
SensorData readAllSensors() {
  SensorData data;
  data.valid = true;
  
  // BMP280 readings
  data.temp_bmp280 = bmp.readTemperature();
  data.pressure = bmp.readPressure() / 100.0F;  // Pa to hPa
  
  if (!baselineSet) {
    baselinePressure = data.pressure;
    baselineSet = true;
  }
  
  data.altitude = bmp.readAltitude(baselinePressure);
  
  Serial.println("🌍 BAROMETRIC PRESSURE (BMP280)");
  Serial.print("   Temperature: ");
  Serial.print(data.temp_bmp280, 1);
  Serial.println(" °C");
  Serial.print("   Pressure: ");
  Serial.print(data.pressure, 2);
  Serial.println(" hPa");
  Serial.print("   Altitude: ");
  Serial.print(data.altitude, 1);
  Serial.println(" m");
  
  // DHT22 readings
  data.humidity = dht.readHumidity();
  data.temp_dht22 = dht.readTemperature();
  
  if (isnan(data.humidity) || isnan(data.temp_dht22)) {
    Serial.println("💧 TEMPERATURE & HUMIDITY (DHT22)");
    Serial.println("   ❌ Sensor read error!");
    data.valid = false;
    return data;
  }
  
  Serial.println("💧 TEMPERATURE & HUMIDITY (DHT22)");
  Serial.print("   Temperature: ");
  Serial.print(data.temp_dht22, 1);
  Serial.println(" °C");
  Serial.print("   Humidity: ");
  Serial.print(data.humidity, 1);
  Serial.println(" %");
  
  // Flame sensor
  data.flame_raw = analogRead(FLAME_SENSOR_PIN);
  Serial.println("🔥 FLAME DETECTION SENSOR");
  Serial.print("   Raw Value: ");
  Serial.println(data.flame_raw);
  Serial.print("   Status: ");
  if (data.flame_raw < FLAME_THRESHOLD) {
    Serial.println("⚠⚠ FLAME DETECTED ⚠⚠");
  } else {
    Serial.println("✓ No flame detected");
  }
  
  // LDR
  data.light_raw = analogRead(LDR_PIN);
  Serial.println("💡 AMBIENT LIGHT SENSOR (LDR)");
  Serial.print("   Raw Value: ");
  Serial.println(data.light_raw);
  
  // Gas sensors
  data.mq135_raw = analogRead(MQ135_PIN);
  data.mq135_baseline = mq135_baseline;
  data.mq135_drop = data.mq135_raw - mq135_baseline;
  
  Serial.println("🌫️  MQ135 - CO2/AIR QUALITY");
  Serial.print("   Raw: ");
  Serial.print(data.mq135_raw);
  Serial.print(" | Baseline: ");
  Serial.print(data.mq135_baseline);
  Serial.print(" | Drop: ");
  Serial.println(data.mq135_drop);
  
  data.mq2_raw = analogRead(MQ2_PIN);
  data.mq2_baseline = mq2_baseline;
  data.mq2_drop = data.mq2_raw - mq2_baseline;
  
  Serial.println("💨 MQ2 - LPG/SMOKE DETECTION");
  Serial.print("   Raw: ");
  Serial.print(data.mq2_raw);
  Serial.print(" | Baseline: ");
  Serial.print(data.mq2_baseline);
  Serial.print(" | Drop: ");
  Serial.println(data.mq2_drop);
  
  data.mq7_raw = analogRead(MQ7_PIN);
  data.mq7_baseline = mq7_baseline;
  data.mq7_drop = data.mq7_raw - mq7_baseline;
  
  Serial.println("☠️  MQ7 - CARBON MONOXIDE (CO)");
  Serial.print("   Raw: ");
  Serial.print(data.mq7_raw);
  Serial.print(" | Baseline: ");
  Serial.print(data.mq7_baseline);
  Serial.print(" | Drop: ");
  Serial.println(data.mq7_drop);
  
  return data;
}

// ============ CREATE JSON PAYLOAD FUNCTION ============
String createJSONPayload(SensorData data) {
  // Create JSON document (size: 512 bytes should be enough)
  JsonDocument doc;
  
  // Add Unix timestamp (seconds since epoch)
  unsigned long currentTime = millis() / 1000;  // Convert to seconds
  doc["timestamp"] = currentTime;
  
  // Add all sensor readings - matching your PL/SQL API exactly
  doc["temperature_bmp280"] = round(data.temp_bmp280 * 100) / 100.0;  // 2 decimal places
  doc["temperature_dht22"] = round(data.temp_dht22 * 100) / 100.0;
  doc["pressure"] = round(data.pressure * 100) / 100.0;
  doc["altitude"] = round(data.altitude * 100) / 100.0;
  doc["humidity"] = round(data.humidity * 100) / 100.0;
  
  doc["flame_raw"] = data.flame_raw;
  doc["light_raw"] = data.light_raw;
  
  doc["mq135_raw"] = data.mq135_raw;
  doc["mq135_baseline"] = data.mq135_baseline;
  doc["mq135_drop"] = data.mq135_drop;
  
  doc["mq2_raw"] = data.mq2_raw;
  doc["mq2_baseline"] = data.mq2_baseline;
  doc["mq2_drop"] = data.mq2_drop;
  
  doc["mq7_raw"] = data.mq7_raw;
  doc["mq7_baseline"] = data.mq7_baseline;
  doc["mq7_drop"] = data.mq7_drop;
  
  // Serialize to string
  String jsonString;
  serializeJson(doc, jsonString);
  
  return jsonString;
}

// ============ SEND DATA TO API FUNCTION ============
void sendDataToAPI(String jsonPayload) {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("❌ Cannot send data - WiFi not connected");
    return;
  }
  
  HTTPClient http;
  
  Serial.println("\n📡 SENDING DATA TO API...");
  Serial.print("Endpoint: ");
  Serial.println(serverURL);
  
  http.begin(serverURL);
  http.addHeader("Content-Type", "application/json");
  
  // Send POST request
  int httpResponseCode = http.POST(jsonPayload);
  
  // Check response
  if (httpResponseCode > 0) {
    Serial.print("✓ HTTP Response code: ");
    Serial.println(httpResponseCode);
    
    String response = http.getString();
    Serial.println("Response:");
    Serial.println(response);
    
    if (httpResponseCode == 201) {
      Serial.println("✓ Data successfully sent and stored!");
    }
  } else {
    Serial.print("❌ Error sending POST request. Error code: ");
    Serial.println(httpResponseCode);
    Serial.print("Error: ");
    Serial.println(http.errorToString(httpResponseCode).c_str());
  }
  
  http.end();
}

// ============ CALIBRATION FUNCTION ============
void calibrateGasSensors() {
  Serial.println("Taking baseline readings in clean air...\n");
  
  // Take multiple readings and average
  long sum135 = 0, sum2 = 0, sum7 = 0;
  int samples = 50;
  
  for (int i = 0; i < samples; i++) {
    sum135 += analogRead(MQ135_PIN);
    sum2 += analogRead(MQ2_PIN);
    sum7 += analogRead(MQ7_PIN);
    delay(50);
  }
  
  mq135_baseline = sum135 / samples;
  mq2_baseline = sum2 / samples;
  mq7_baseline = sum7 / samples;
  
  gas_sensors_calibrated = true;
  
  Serial.print("MQ135 Baseline: ");
  Serial.println(mq135_baseline);
  Serial.print("MQ2 Baseline: ");
  Serial.println(mq2_baseline);
  Serial.print("MQ7 Baseline: ");
  Serial.println(mq7_baseline);
  Serial.println("\n✓ Gas sensor calibration complete!\n");
}

/*
 * ============================================================================
 * CONFIGURATION INSTRUCTIONS:
 * ============================================================================
 * 
 * 1. UPDATE WiFi CREDENTIALS (Lines 28-29):
 *    const char* ssid = "YOUR_SSID";
 *    const char* password = "YOUR_PASSWORD";
 * 
 * 2. UPDATE API ENDPOINT (Line 32):
 *    const char* serverURL = "https://apex.oracle.com/pls/apex/...";
 *    Replace with your actual Oracle APEX REST endpoint URL
 * 
 * 3. REQUIRED LIBRARIES:
 *    - WiFi.h (built-in)
 *    - HTTPClient.h (built-in)
 *    - ArduinoJson.h (install via Library Manager - version 7.x)
 *    - Adafruit_BMP280.h (install via Library Manager)
 *    - DHT.h (install via Library Manager)
 *    - Wire.h (built-in)
 * 
 * 4. JSON PAYLOAD STRUCTURE:
 *    Matches your PL/SQL API exactly with fields:
 *    - timestamp (Unix epoch in seconds)
 *    - temperature_bmp280, temperature_dht22, pressure, altitude, humidity
 *    - flame_raw, light_raw
 *    - mq135_raw, mq135_baseline, mq135_drop
 *    - mq2_raw, mq2_baseline, mq2_drop
 *    - mq7_raw, mq7_baseline, mq7_drop
 * 
 * 5. WIRING REFERENCE:
 *    Environmental Sensors:
 *      Flame Sensor: GPIO 35 (Analog)
 *      DHT22: GPIO 16 (Digital)
 *      LDR: GPIO 34 (Analog)
 *    
 *    I2C Devices:
 *      BMP280: SDA=GPIO 21, SCL=GPIO 22
 *    
 *    Gas Sensors:
 *      MQ135: GPIO 32
 *      MQ2: GPIO 33 (use voltage divider if 5V)
 *      MQ7: GPIO 36 (use voltage divider if 5V)
 * 
 * ============================================================================
 */
