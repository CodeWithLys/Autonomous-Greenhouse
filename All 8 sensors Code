/*
 * UNIFIED GREENHOUSE SENSOR MONITORING SYSTEM
 * IFS325 Group Project - ARC Smart Agriculture
 * ESP32 Version - All Sensors Running Simultaneously
 * 
 * Sensors: BMP280, DHT22, Flame, LDR, MQ135, MQ2, MQ5, MQ7
 */

#include "Arduino.h"
#include <Wire.h>
#include <Adafruit_BMP280.h>
#include "DHT.h"

// ============ PIN DEFINITIONS ============
// Environmental Sensors
#define FLAME_SENSOR_PIN 35      // Analog - Flame detection
#define DHT_PIN 16               // Digital - Temperature & Humidity
#define LDR_PIN 4                // Analog - Ambient light
#define DHTTYPE DHT22            // DHT22 sensor type

// I2C Sensors
#define SDA_PIN 21               // I2C SDA
#define SCL_PIN 22               // I2C SCL

// Gas Sensors (Analog)
#define MQ135_PIN 32             // Analog - CO2/Air Quality
#define MQ2_PIN 33               // Analog - LPG/Smoke (5V with voltage divider)
#define MQ5_PIN 34               // Analog - LPG/Natural Gas (5V with voltage divider)
#define MQ7_PIN 14               // Analog - Carbon Monoxide (5V with voltage divider)

// ============ SENSOR OBJECT INITIALIZATION ============
Adafruit_BMP280 bmp;
DHT dht(DHT_PIN, DHTTYPE);

// ============ CALIBRATION & BASELINE VALUES ============
// BMP280 Pressure
const float PRESSURE_NORMAL = 1013.25;
float baselinePressure = PRESSURE_NORMAL;
bool baselineSet = false;

// Gas Sensors - Baseline values (calibrated in clean air)
int mq135_baseline = 0;
int mq2_baseline = 0;
int mq5_baseline = 0;
int mq7_baseline = 0;
bool gas_sensors_calibrated = false;

// Flame Sensor Threshold
const int FLAME_THRESHOLD = 3000;

// ============ TIMING VARIABLES ============
unsigned long lastReadTime = 0;
const long READ_INTERVAL = 2000;  // Read all sensors every 2 seconds

// ============ SETUP ============
void setup() {
  Serial.begin(115200);
  delay(1000);
  
  Serial.println("\n\n╔══════════════════════════════════════════════════════╗");
  Serial.println("║   UNIFIED GREENHOUSE SENSOR MONITORING SYSTEM         ║");
  Serial.println("║   IFS325 Group Project - ARC Smart Agriculture        ║");
  Serial.println("╚══════════════════════════════════════════════════════╝\n");
  
  // Initialize I2C for BMP280
  Wire.begin(SDA_PIN, SCL_PIN);
  
  // Initialize BMP280
  if (!bmp.begin(0x76)) {
    if (!bmp.begin(0x77)) {
      Serial.println("❌ BMP280 sensor not found!");
      while (1) delay(10);
    }
  }
  bmp.setSampling(Adafruit_BMP280::MODE_NORMAL,
                  Adafruit_BMP280::SAMPLING_X2,
                  Adafruit_BMP280::SAMPLING_X16,
                  Adafruit_BMP280::FILTER_X16,
                  Adafruit_BMP280::STANDBY_MS_500);
  Serial.println("✓ BMP280 initialized");
  
  // Initialize DHT22
  dht.begin();
  Serial.println("✓ DHT22 initialized");
  
  // Configure analog pins
  pinMode(FLAME_SENSOR_PIN, INPUT);
  pinMode(LDR_PIN, INPUT);
  pinMode(MQ135_PIN, INPUT);
  pinMode(MQ2_PIN, INPUT);
  pinMode(MQ5_PIN, INPUT);
  pinMode(MQ7_PIN, INPUT);
  Serial.println("✓ Analog pins configured");
  
  Serial.println("\n╔══════════════════════════════════════════════════════╗");
  Serial.println("║           GAS SENSOR CALIBRATION PHASE               ║");
  Serial.println("╚══════════════════════════════════════════════════════╝");
  Serial.println("Ensuring all sensors are in CLEAN AIR environment...");
  Serial.println("Gas sensors warming up and calibrating (60 seconds)...\n");
  
  // Extended warm-up for gas sensors
  for (int i = 60; i > 0; i--) {
    if (i % 10 == 0) {
      Serial.print("Warming up: ");
      Serial.print(i);
      Serial.println(" seconds remaining...");
    }
    delay(1000);
  }
  
  // Calibrate gas sensors in clean air
  calibrateGasSensors();
  
  Serial.println("\n╔══════════════════════════════════════════════════════╗");
  Serial.println("║        INITIALIZATION COMPLETE - MONITORING STARTED  ║");
  Serial.println("╚══════════════════════════════════════════════════════╝\n");
}

// ============ MAIN LOOP ============
void loop() {
  unsigned long currentTime = millis();
  
  // Read all sensors every READ_INTERVAL milliseconds
  if (currentTime - lastReadTime >= READ_INTERVAL) {
    lastReadTime = currentTime;
    
    Serial.println("\n╔══════════════════════════════════════════════════════╗");
    Serial.println("║              SENSOR READING CYCLE                    ║");
    Serial.print("║ Time: ");
    Serial.print(currentTime / 1000);
    Serial.println(" seconds                             ║");
    Serial.println("╚══════════════════════════════════════════════════════╝\n");
    
    readBMP280();
    readDHT22();
    readFlameSensor();
    readLDR();
    readMQ135();
    readMQ2();
    readMQ5();
    readMQ7();
    
    Serial.println("\n════════════════════════════════════════════════════════\n");
  }
}

// ============ SENSOR READING FUNCTIONS ============

void readBMP280() {
  float temperature = bmp.readTemperature();
  float pressure = bmp.readPressure() / 100.0F;  // Pa to hPa
  
  if (!baselineSet) {
    baselinePressure = pressure;
    baselineSet = true;
  }
  
  float altitude = bmp.readAltitude(baselinePressure);
  
  Serial.println("🌍 BAROMETRIC PRESSURE (BMP280)");
  Serial.print("   Temperature: ");
  Serial.print(temperature, 1);
  Serial.println(" °C");
  Serial.print("   Pressure: ");
  Serial.print(pressure, 2);
  Serial.println(" hPa");
  Serial.print("   Altitude: ");
  Serial.print(altitude, 1);
  Serial.println(" m");
  Serial.print("   Status: ");
  if (pressure < 1000.0) Serial.println("Low - Unsettled weather");
  else if (pressure > 1025.0) Serial.println("High - Stable conditions");
  else Serial.println("Normal - Fair conditions");
}

void readDHT22() {
  float humidity = dht.readHumidity();
  float tempC = dht.readTemperature();
  
  if (isnan(humidity) || isnan(tempC)) {
    Serial.println("💧 TEMPERATURE & HUMIDITY (DHT22)");
    Serial.println("   ❌ Sensor read error!");
    return;
  }
  
  Serial.println("💧 TEMPERATURE & HUMIDITY (DHT22)");
  Serial.print("   Temperature: ");
  Serial.print(tempC, 1);
  Serial.println(" °C");
  Serial.print("   Humidity: ");
  Serial.print(humidity, 1);
  Serial.println(" %");
  
  // Status check
  bool tempOK = (tempC >= 18.0 && tempC <= 27.0);
  bool humOK = (humidity >= 50.0 && humidity <= 70.0);
  
  Serial.print("   Status: ");
  if (tempOK && humOK) Serial.println("✓ Optimal");
  else if (!tempOK && !humOK) Serial.println("⚠ Both out of range");
  else if (!tempOK) Serial.println("⚠ Temperature out of range");
  else Serial.println("⚠ Humidity out of range");
}

void readFlameSensor() {
  int flameRaw = analogRead(FLAME_SENSOR_PIN);
  
  Serial.println("🔥 FLAME DETECTION SENSOR");
  Serial.print("   Raw Value: ");
  Serial.println(flameRaw);
  Serial.print("   Status: ");
  
  if (flameRaw < FLAME_THRESHOLD) {
    Serial.println("⚠⚠ FLAME DETECTED ⚠⚠");
  } else {
    Serial.println("✓ No flame detected");
  }
}

void readLDR() {
  int ldrRaw = analogRead(LDR_PIN);
  
  Serial.println("💡 AMBIENT LIGHT SENSOR (LDR)");
  Serial.print("   Raw Value: ");
  Serial.println(ldrRaw);
  Serial.print("   Brightness: ");
  
  if (ldrRaw > 3500) Serial.println("Very Bright (Sunlight)");
  else if (ldrRaw > 2500) Serial.println("Bright (Well-lit)");
  else if (ldrRaw > 1000) Serial.println("Moderate (Cloudy/Indoor)");
  else if (ldrRaw > 200) Serial.println("Dim (Dusk)");
  else Serial.println("Dark (Night)");
}

void readMQ135() {
  int mq135_raw = analogRead(MQ135_PIN);
  int drop = mq135_baseline - mq135_raw;
  
  Serial.println("🌫️  MQ135 - CO2/AIR QUALITY");
  Serial.print("   Raw Value: ");
  Serial.println(mq135_raw);
  Serial.print("   Baseline: ");
  Serial.println(mq135_baseline);
  Serial.print("   Drop: ");
  Serial.println(drop);
  Serial.print("   Status: ");
  
  if (drop > 500) Serial.println("⚠ Poor air quality");
  else if (drop > 200) Serial.println("⚠ Air quality degraded");
  else Serial.println("✓ Good air quality");
}

void readMQ2() {
  int mq2_raw = analogRead(MQ2_PIN);
  int drop = mq2_baseline - mq2_raw;
  
  Serial.println("💨 MQ2 - LPG/SMOKE DETECTION");
  Serial.print("   Raw Value: ");
  Serial.println(mq2_raw);
  Serial.print("   Baseline: ");
  Serial.println(mq2_baseline);
  Serial.print("   Drop: ");
  Serial.println(drop);
  Serial.print("   Status: ");
  
  if (drop > 1500) Serial.println("⚠⚠ CRITICAL - HIGH GAS/SMOKE ⚠⚠");
  else if (drop > 750) Serial.println("⚠ Elevated gas/smoke levels");
  else Serial.println("✓ Safe");
}

void readMQ5() {
  int mq5_raw = analogRead(MQ5_PIN);
  int drop = mq5_baseline - mq5_raw;
  
  Serial.println("🔥 MQ5 - LPG/NATURAL GAS");
  Serial.print("   Raw Value: ");
  Serial.println(mq5_raw);
  Serial.print("   Baseline: ");
  Serial.println(mq5_baseline);
  Serial.print("   Drop: ");
  Serial.println(drop);
  Serial.print("   Status: ");
  
  if (drop > 1500) Serial.println("⚠⚠ CRITICAL - HIGH GAS LEVEL ⚠⚠");
  else if (drop > 750) Serial.println("⚠ Elevated gas levels");
  else Serial.println("✓ Safe");
}

void readMQ7() {
  int mq7_raw = analogRead(MQ7_PIN);
  int drop = mq7_baseline - mq7_raw;
  
  Serial.println("☠️  MQ7 - CARBON MONOXIDE (CO)");
  Serial.print("   Raw Value: ");
  Serial.println(mq7_raw);
  Serial.print("   Baseline: ");
  Serial.println(mq7_baseline);
  Serial.print("   Drop: ");
  Serial.println(drop);
  Serial.print("   Status: ");
  
  if (drop > 1500) Serial.println("⚠⚠ CRITICAL - DANGEROUS CO LEVEL ⚠⚠");
  else if (drop > 750) Serial.println("⚠ Elevated CO levels - ventilate");
  else Serial.println("✓ Safe");
}

// ============ CALIBRATION FUNCTION ============
void calibrateGasSensors() {
  Serial.println("Taking baseline readings in clean air...\n");
  
  // Take multiple readings and average
  long sum135 = 0, sum2 = 0, sum5 = 0, sum7 = 0;
  int samples = 50;
  
  for (int i = 0; i < samples; i++) {
    sum135 += analogRead(MQ135_PIN);
    sum2 += analogRead(MQ2_PIN);
    sum5 += analogRead(MQ5_PIN);
    sum7 += analogRead(MQ7_PIN);
    delay(50);
  }
  
  mq135_baseline = sum135 / samples;
  mq2_baseline = sum2 / samples;
  mq5_baseline = sum5 / samples;
  mq7_baseline = sum7 / samples;
  
  gas_sensors_calibrated = true;
  
  Serial.print("MQ135 Baseline: ");
  Serial.println(mq135_baseline);
  Serial.print("MQ2 Baseline: ");
  Serial.println(mq2_baseline);
  Serial.print("MQ5 Baseline: ");
  Serial.println(mq5_baseline);
  Serial.print("MQ7 Baseline: ");
  Serial.println(mq7_baseline);
  Serial.println("\n✓ Gas sensor calibration complete!\n");
}

/*
 * WIRING REFERENCE:
 * 
 * Environmental Sensors:
 *   Flame Sensor: GPIO 35 (Analog input)
 *   DHT22: GPIO 16 (Digital input with pull-up)
 *   LDR: GPIO 34 (Analog input)
 * 
 * I2C Devices:
 *   BMP280: SDA=GPIO 21, SCL=GPIO 22
 * 
 * Gas Sensors (IMPORTANT: Use voltage dividers for 5V outputs):
 *   MQ135: GPIO 32 (3.3V compatible)
 *   MQ2: GPIO 33 (5V - USE VOLTAGE DIVIDER)
 *   MQ5: GPIO 36 (5V - USE VOLTAGE DIVIDER)
 *   MQ7: GPIO 39 (5V - USE VOLTAGE DIVIDER)
 *
 * VOLTAGE DIVIDER for 5V sensors:
 *   5V output --[4.7kΩ]-- GPIO --[10kΩ]-- GND
 *   This scales 5V down to ~1.65V (safe for ESP32)
 */
