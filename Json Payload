/*
 * UNIFIED GREENHOUSE SENSOR MONITORING SYSTEM
 * Oracle APEX Integration - JSON Payload
 * IFS325 Group Project - ARC Smart Agriculture
 */

#include "Arduino.h"
#include <Wire.h>
#include <Adafruit_BMP280.h>
#include "DHT.h"
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>
#include <time.h>

// ============ PIN DEFINITIONS ============
#define FLAME_SENSOR_PIN 35
#define DHT_PIN 16
#define LDR_PIN 4
#define DHTTYPE DHT22

#define SDA_PIN 21
#define SCL_PIN 22

#define MQ135_PIN 32
#define MQ2_PIN 33
#define MQ7_PIN 14

// ============ WIFI & ORACLE APEX CREDENTIALS ============
const char* ssid = "YOUR_SSID";
const char* password = "YOUR_PASSWORD";
const char* oracle_apex_url = "https://your-oracle-instance.com/ords/your_schema/greenhouse_sensors";
const char* oracle_api_key = "YOUR_API_KEY_IF_REQUIRED";

// ============ SENSOR OBJECT INITIALIZATION ============
Adafruit_BMP280 bmp;
DHT dht(DHT_PIN, DHTTYPE);
WiFiClientSecure wifiClient;

// ============ CALIBRATION & BASELINE VALUES ============
const float PRESSURE_NORMAL = 1013.25;
float baselinePressure = PRESSURE_NORMAL;
bool baselineSet = false;

int mq135_baseline = 0;
int mq2_baseline = 0;
int mq7_baseline = 0;
bool gas_sensors_calibrated = false;

const int FLAME_THRESHOLD = 2000;

// ============ TIMING VARIABLES ============
unsigned long lastReadTime = 0;
const long READ_INTERVAL = 10000;  // Read all sensors every 10 seconds

// ============ JSON PAYLOAD STRUCTURE ============
struct SensorPayload {
  float temperature_bmp280;
  float temperature_dht22;
  float pressure;
  float altitude;
  float humidity;
  int flame_raw;
  int light_raw;
  int mq135_raw;
  int mq135_baseline;
  int mq135_drop;
  int mq2_raw;
  int mq2_baseline;
  int mq2_drop;
  int mq7_raw;
  int mq7_baseline;
  int mq7_drop;
  long timestamp;
};

SensorPayload sensorData;

// ============ SETUP ============
void setup() {
  Serial.begin(115200);
  delay(1000);
  
  Serial.println("\n\n╔══════════════════════════════════════════════════════╗");
  Serial.println("║   UNIFIED GREENHOUSE SENSOR MONITORING SYSTEM         ║");
  Serial.println("║   IFS325 Group Project - ARC Smart Agriculture        ║");
  Serial.println("║   Oracle APEX Integration                             ║");
  Serial.println("╚══════════════════════════════════════════════════════╝\n");
  
  // Initialize I2C for BMP280
  Wire.begin(SDA_PIN, SCL_PIN);
  
  // Initialize BMP280
  if (!bmp.begin(0x76)) {
    if (!bmp.begin(0x77)) {
      Serial.println("❌ BMP280 sensor not found!");
      while (1) delay(10);
    }
  }
  bmp.setSampling(Adafruit_BMP280::MODE_NORMAL,
                  Adafruit_BMP280::SAMPLING_X2,
                  Adafruit_BMP280::SAMPLING_X16,
                  Adafruit_BMP280::FILTER_X16,
                  Adafruit_BMP280::STANDBY_MS_500);
  Serial.println("✓ BMP280 initialized");
  
  // Initialize DHT22
  dht.begin();
  Serial.println("✓ DHT22 initialized");
  
  // Configure analog pins
  pinMode(FLAME_SENSOR_PIN, INPUT);
  pinMode(LDR_PIN, INPUT);
  pinMode(MQ135_PIN, INPUT);
  pinMode(MQ2_PIN, INPUT);
  pinMode(MQ7_PIN, INPUT);
  Serial.println("✓ Analog pins configured");
  
  // Connect to WiFi
  connectToWiFi();
  
  // Set time via NTP for accurate timestamps
  configTime(0, 0, "pool.ntp.org", "time.nist.gov");
  
  Serial.println("\n╔══════════════════════════════════════════════════════╗");
  Serial.println("║           GAS SENSOR CALIBRATION PHASE               ║");
  Serial.println("╚══════════════════════════════════════════════════════╝");
  Serial.println("Ensuring all sensors are in CLEAN AIR environment...");
  Serial.println("Gas sensors warming up and calibrating (60 seconds)...\n");
  
  // Extended warm-up for gas sensors
  for (int i = 60; i > 0; i--) {
    if (i % 10 == 0) {
      Serial.print("Warming up: ");
      Serial.print(i);
      Serial.println(" seconds remaining...");
    }
    delay(1000);
  }
  
  // Calibrate gas sensors in clean air
  calibrateGasSensors();
  
  Serial.println("\n╔══════════════════════════════════════════════════════╗");
  Serial.println("║        INITIALIZATION COMPLETE - MONITORING STARTED  ║");
  Serial.println("╚══════════════════════════════════════════════════════╝\n");
}

// ============ MAIN LOOP ============
void loop() {
  unsigned long currentTime = millis();
  
  // Maintain WiFi connection
  if (!WiFi.isConnected()) {
    connectToWiFi();
  }
  
  // Read all sensors every READ_INTERVAL milliseconds
  if (currentTime - lastReadTime >= READ_INTERVAL) {
    lastReadTime = currentTime;
    
    // Read all sensors and populate struct
    readAllSensors();
    
    // Print to serial
    printSensorData();
    
    // Send to Oracle APEX
    sendToOracleAPEX();
  }
}

// ============ WIFI CONNECTION ============
void connectToWiFi() {
  Serial.print("Connecting to WiFi: ");
  Serial.println(ssid);
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 20) {
    delay(500);
    Serial.print(".");
    attempts++;
  }
  
  if (WiFi.isConnected()) {
    Serial.println("\n✓ WiFi connected");
    Serial.print("IP address: ");
    Serial.println(WiFi.localIP());
  } else {
    Serial.println("\n❌ WiFi connection failed");
  }
}

// ============ READ ALL SENSORS ============
void readAllSensors() {
  // Get current timestamp
  time_t now = time(nullptr);
  sensorData.timestamp = (long)now;
  
  // BMP280
  sensorData.temperature_bmp280 = bmp.readTemperature();
  sensorData.pressure = bmp.readPressure() / 100.0F;
  
  if (!baselineSet) {
    baselinePressure = sensorData.pressure;
    baselineSet = true;
  }
  
  sensorData.altitude = bmp.readAltitude(baselinePressure);
  
  // DHT22
  sensorData.temperature_dht22 = dht.readTemperature();
  sensorData.humidity = dht.readHumidity();
  
  // Flame Sensor
  sensorData.flame_raw = analogRead(FLAME_SENSOR_PIN);
  
  // LDR
  sensorData.light_raw = analogRead(LDR_PIN);
  
  // MQ135
  sensorData.mq135_raw = analogRead(MQ135_PIN);
  sensorData.mq135_baseline = mq135_baseline;
  sensorData.mq135_drop = mq135_baseline - sensorData.mq135_raw;
  
  // MQ2
  sensorData.mq2_raw = analogRead(MQ2_PIN);
  sensorData.mq2_baseline = mq2_baseline;
  sensorData.mq2_drop = mq2_baseline - sensorData.mq2_raw;
  
  // MQ7
  sensorData.mq7_raw = analogRead(MQ7_PIN);
  sensorData.mq7_baseline = mq7_baseline;
  sensorData.mq7_drop = mq7_baseline - sensorData.mq7_raw;
}

// ============ CREATE JSON PAYLOAD ============
String createJsonPayload() {
  StaticJsonDocument<1024> doc;
  
  // Add all sensor data to JSON
  doc["temperature_bmp280"] = serialized(String(sensorData.temperature_bmp280, 2));
  doc["temperature_dht22"] = serialized(String(sensorData.temperature_dht22, 2));
  doc["pressure"] = serialized(String(sensorData.pressure, 2));
  doc["altitude"] = serialized(String(sensorData.altitude, 2));
  doc["humidity"] = serialized(String(sensorData.humidity, 2));
  doc["flame_raw"] = sensorData.flame_raw;
  doc["light_raw"] = sensorData.light_raw;
  
  // MQ135
  doc["mq135_raw"] = sensorData.mq135_raw;
  doc["mq135_baseline"] = sensorData.mq135_baseline;
  doc["mq135_drop"] = sensorData.mq135_drop;
  
  // MQ2
  doc["mq2_raw"] = sensorData.mq2_raw;
  doc["mq2_baseline"] = sensorData.mq2_baseline;
  doc["mq2_drop"] = sensorData.mq2_drop;
  
  // MQ7
  doc["mq7_raw"] = sensorData.mq7_raw;
  doc["mq7_baseline"] = sensorData.mq7_baseline;
  doc["mq7_drop"] = sensorData.mq7_drop;
  
  // Timestamp
  doc["timestamp"] = sensorData.timestamp;
  
  String jsonString;
  serializeJson(doc, jsonString);
  return jsonString;
}

// ============ SEND TO ORACLE APEX ============
void sendToOracleAPEX() {
  if (!WiFi.isConnected()) {
    Serial.println("❌ WiFi not connected - skipping Oracle APEX POST");
    return;
  }
  
  HTTPClient http;
  
  // For HTTPS with self-signed certificates (comment out for production with valid certs)
  wifiClient.setInsecure();
  
  http.begin(wifiClient, oracle_apex_url);
  http.addHeader("Content-Type", "application/json");
  
  // Add API key if required
  if (strlen(oracle_api_key) > 0) {
    http.addHeader("Authorization", String("Bearer ") + oracle_api_key);
  }
  
  // Create and send JSON payload
  String jsonPayload = createJsonPayload();
  
  Serial.println("\n╔══════════════════════════════════════════════════════╗");
  Serial.println("║         SENDING TO ORACLE APEX DATABASE              ║");
  Serial.println("╚══════════════════════════════════════════════════════╝");
  Serial.println("JSON Payload:");
  Serial.println(jsonPayload);
  
  int httpResponseCode = http.POST(jsonPayload);
  
  Serial.print("\nHTTP Response Code: ");
  Serial.println(httpResponseCode);
  
  if (httpResponseCode > 0) {
    String response = http.getString();
    Serial.println("Response Body:");
    Serial.println(response);
    
    if (httpResponseCode == 200 || httpResponseCode == 201) {
      Serial.println("✓ Successfully posted to Oracle APEX");
    } else {
      Serial.println("⚠ Unexpected response code");
    }
  } else {
    Serial.print("❌ Error: ");
    Serial.println(httpResponseCode);
  }
  
  http.end();
  Serial.println("════════════════════════════════════════════════════════\n");
}

// ============ PRINT SENSOR DATA ============
void printSensorData() {
  Serial.println("\n╔══════════════════════════════════════════════════════╗");
  Serial.println("║              SENSOR READING CYCLE                    ║");
  Serial.println("╚══════════════════════════════════════════════════════╝\n");
  
  Serial.println("BMP280 (Pressure & Temperature):");
  Serial.print("  Temperature: ");
  Serial.print(sensorData.temperature_bmp280, 2);
  Serial.println(" °C");
  Serial.print("  Pressure: ");
  Serial.print(sensorData.pressure, 2);
  Serial.println(" hPa");
  Serial.print("  Altitude: ");
  Serial.print(sensorData.altitude, 2);
  Serial.println(" m");
  
  Serial.println("\nDHT22 (Temperature & Humidity):");
  Serial.print("  Temperature: ");
  Serial.print(sensorData.temperature_dht22, 2);
  Serial.println(" °C");
  Serial.print("  Humidity: ");
  Serial.print(sensorData.humidity, 2);
  Serial.println(" %");
  
  Serial.println("\nFlame Sensor:");
  Serial.print("  Raw Value: ");
  Serial.println(sensorData.flame_raw);
  
  Serial.println("\nLDR (Ambient Light):");
  Serial.print("  Raw Value: ");
  Serial.println(sensorData.light_raw);
  
  Serial.println("\nMQ135 (CO2/Air Quality):");
  Serial.print("  Raw: ");
  Serial.print(sensorData.mq135_raw);
  Serial.print(" | Baseline: ");
  Serial.print(sensorData.mq135_baseline);
  Serial.print(" | Drop: ");
  Serial.println(sensorData.mq135_drop);
  
  Serial.println("\nMQ2 (LPG/Smoke):");
  Serial.print("  Raw: ");
  Serial.print(sensorData.mq2_raw);
  Serial.print(" | Baseline: ");
  Serial.print(sensorData.mq2_baseline);
  Serial.print(" | Drop: ");
  Serial.println(sensorData.mq2_drop);
  
  Serial.println("\nMQ7 (Carbon Monoxide):");
  Serial.print("  Raw: ");
  Serial.print(sensorData.mq7_raw);
  Serial.print(" | Baseline: ");
  Serial.print(sensorData.mq7_baseline);
  Serial.print(" | Drop: ");
  Serial.println(sensorData.mq7_drop);
  
  Serial.print("\nTimestamp: ");
  Serial.println(sensorData.timestamp);
}

// ============ CALIBRATION FUNCTION ============
void calibrateGasSensors() {
  Serial.println("Taking baseline readings in clean air...\n");
  
  long sum135 = 0, sum2 = 0, sum7 = 0;
  int samples = 50;
  
  for (int i = 0; i < samples; i++) {
    sum135 += analogRead(MQ135_PIN);
    sum2 += analogRead(MQ2_PIN);
    sum7 += analogRead(MQ7_PIN);
    delay(50);
  }
  
  mq135_baseline = sum135 / samples;
  mq2_baseline = sum2 / samples;
  mq7_baseline = sum7 / samples;
  
  gas_sensors_calibrated = true;
  
  Serial.print("MQ135 Baseline: ");
  Serial.println(mq135_baseline);
  Serial.print("MQ2 Baseline: ");
  Serial.println(mq2_baseline);
  Serial.print("MQ7 Baseline: ");
  Serial.println(mq7_baseline);
  Serial.println("\n✓ Gas sensor calibration complete!\n");
}
