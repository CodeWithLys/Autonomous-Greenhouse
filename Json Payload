/*
 * UNIFIED GREENHOUSE SENSOR MONITORING SYSTEM
 * IFS325 Group Project - ARC Smart Agriculture
 * ESP32 Version - All Sensors Running Simultaneously
 * With Oracle APEX Integration via HTTP POST
 * 
 * Sensors: BMP280, DHT22, Flame, LDR, MQ135, MQ2, MQ7
 */

#include "Arduino.h"
#include <Wire.h>
#include <Adafruit_BMP280.h>
#include "DHT.h"
#include <HTTPClient.h>
#include <WiFi.h>
#include <ArduinoJson.h>

// ============ PIN DEFINITIONS ============
// Environmental Sensors
#define FLAME_SENSOR_PIN 35      // Analog - Flame detection
#define DHT_PIN 16               // Digital - Temperature & Humidity
#define LDR_PIN 4                // Analog - Ambient light
#define DHTTYPE DHT22            // DHT22 sensor type

// I2C Sensors
#define SDA_PIN 21               // I2C SDA
#define SCL_PIN 22               // I2C SCL

// Gas Sensors (Analog)
#define MQ135_PIN 32             // Analog - CO2/Air Quality
#define MQ2_PIN 33               // Analog - LPG/Smoke (5V with voltage divider)
#define MQ7_PIN 14               // Analog - Carbon Monoxide (5V with voltage divider)

// ============ SENSOR OBJECT INITIALIZATION ============
Adafruit_BMP280 bmp;
DHT dht(DHT_PIN, DHTTYPE);

// ============ CALIBRATION & BASELINE VALUES ============
// BMP280 Pressure
const float PRESSURE_NORMAL = 1013.25;
float baselinePressure = PRESSURE_NORMAL;
bool baselineSet = false;

// Calibration & baseline values (calibrated in clean air)
int mq135_baseline = 0;
int mq2_baseline = 0;
int mq7_baseline = 0;
bool gas_sensors_calibrated = false;

// Flame Sensor Threshold
const int FLAME_THRESHOLD = 2000;

// ============ WiFi and Oracle APEX Configuration ============
const char* ssid = "YOUR_SSID";                    // Replace with your WiFi network name
const char* password = "YOUR_PASSWORD";            // Replace with your WiFi password
const char* oracleApexUrl = "http://YOUR_APEX_DOMAIN/apex/rest/YOUR_ENDPOINT";  // Replace with your APEX REST endpoint

unsigned long reading_id = 1;  // Auto-increment counter for readings

// ============ TIMING VARIABLES ============
unsigned long lastReadTime = 0;
const long READ_INTERVAL = 10000;  // Read all sensors every 10 seconds

// ============ WiFi Connection Function ============
void connectToWiFi() {
  Serial.println("\nüì° Connecting to WiFi...");
  WiFi.begin(ssid, password);
  
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 20) {
    delay(500);
    Serial.print(".");
    attempts++;
  }
  
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\n‚úì WiFi Connected!");
    Serial.print("IP Address: ");
    Serial.println(WiFi.localIP());
  } else {
    Serial.println("\n‚ùå WiFi Connection Failed!");
  }
}

// ============ Post Sensor Data to Oracle APEX ============
void postSensorDataToApex() {
  // Only proceed if WiFi is connected
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("‚ö† WiFi not connected. Skipping data post.");
    return;
  }
  
  // Create JSON document
  StaticJsonDocument<512> doc;
  
  // Read all sensor values
  float bmp_temp = bmp.readTemperature();
  float bmp_pressure = bmp.readPressure() / 100.0F;
  float bmp_altitude = bmp.readAltitude(baselinePressure);
  
  float dht_humidity = dht.readHumidity();
  float dht_temp = dht.readTemperature();
  
  int flame_value = analogRead(FLAME_SENSOR_PIN);
  int light_value = analogRead(LDR_PIN);
  
  int mq135_value = analogRead(MQ135_PIN);
  int mq135_drop_value = mq135_value - mq135_baseline;
  
  int mq2_value = analogRead(MQ2_PIN);
  int mq2_drop_value = mq2_value - mq2_baseline;
  
  int mq7_value = analogRead(MQ7_PIN);
  int mq7_drop_value = mq7_value - mq7_baseline;
  
  unsigned long current_time = millis();
  
  // Populate JSON document
  doc["temperature_bmp280"] = bmp_temp;
  doc["temperature_dht22"] = dht_temp;
  doc["pressure"] = bmp_pressure;
  doc["altitude"] = bmp_altitude;
  doc["humidity"] = dht_humidity;
  
  doc["flame_raw"] = flame_value;
  doc["light_raw"] = light_value;
  
  doc["mq135_raw"] = mq135_value;
  doc["mq135_baseline"] = mq135_baseline;
  doc["mq135_drop"] = mq135_drop_value;
  
  doc["mq2_raw"] = mq2_value;
  doc["mq2_baseline"] = mq2_baseline;
  doc["mq2_drop"] = mq2_drop_value;
  
  doc["mq7_raw"] = mq7_value;
  doc["mq7_baseline"] = mq7_baseline;
  doc["mq7_drop"] = mq7_drop_value;
  
  doc["timestamp"] = current_time;
  doc["reading_id"] = reading_id++;
  
  // Serialize JSON to string
  String jsonString;
  serializeJson(doc, jsonString);
  
  // Print to Serial for debugging
  Serial.println("\nüì§ Posting to Oracle APEX:");
  serializeJsonPretty(doc, Serial);
  
  // Send HTTP POST request
  HTTPClient http;
  http.begin(oracleApexUrl);
  http.addHeader("Content-Type", "application/json");
  
  int httpResponseCode = http.POST(jsonString);
  
  if (httpResponseCode > 0) {
    Serial.print("‚úì HTTP Response code: ");
    Serial.println(httpResponseCode);
    
    if (httpResponseCode == 200 || httpResponseCode == 201) {
      Serial.println("‚úì Data successfully posted to Oracle APEX!");
    } else {
      String response = http.getString();
      Serial.print("Response: ");
      Serial.println(response);
    }
  } else {
    Serial.print("‚ùå Error code: ");
    Serial.println(httpResponseCode);
  }
  
  http.end();
  Serial.println();
}

// ============ SETUP ============
void setup() {
  Serial.begin(115200);
  delay(1000);
  
  Serial.println("\n\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
  Serial.println("‚ïë   UNIFIED GREENHOUSE SENSOR MONITORING SYSTEM         ‚ïë");
  Serial.println("‚ïë   IFS325 Group Project - ARC Smart Agriculture        ‚ïë");
  Serial.println("‚ïë   With Oracle APEX Integration                        ‚ïë");
  Serial.println("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n");
  
  // Initialize I2C for BMP280
  Wire.begin(SDA_PIN, SCL_PIN);
  
  // Initialize BMP280
  if (!bmp.begin(0x76)) {
    if (!bmp.begin(0x77)) {
      Serial.println("‚ùå BMP280 sensor not found!");
      while (1) delay(10);
    }
  }
  bmp.setSampling(Adafruit_BMP280::MODE_NORMAL,
                  Adafruit_BMP280::SAMPLING_X2,
                  Adafruit_BMP280::SAMPLING_X16,
                  Adafruit_BMP280::FILTER_X16,
                  Adafruit_BMP280::STANDBY_MS_500);
  Serial.println("‚úì BMP280 initialized");
  
  // Initialize DHT22
  dht.begin();
  Serial.println("‚úì DHT22 initialized");
  
  // Configure analog pins
  pinMode(FLAME_SENSOR_PIN, INPUT);
  pinMode(LDR_PIN, INPUT);
  pinMode(MQ135_PIN, INPUT);
  pinMode(MQ2_PIN, INPUT);
  pinMode(MQ7_PIN, INPUT);
  Serial.println("‚úì Analog pins configured");
  
  Serial.println("\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
  Serial.println("‚ïë           GAS SENSOR CALIBRATION PHASE               ‚ïë");
  Serial.println("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
  Serial.println("Ensuring all sensors are in CLEAN AIR environment...");
  Serial.println("Gas sensors warming up and calibrating (300 seconds)...\n");
  
  // Extended warm-up for gas sensors (5 minutes for MQ7 stabilization)
  for (int i = 300; i > 0; i--) {
    if (i % 30 == 0) {
      Serial.print("Warming up: ");
      Serial.print(i);
      Serial.println(" seconds remaining...");
    }
    delay(1000);
  }
  
  // Calibrate gas sensors in clean air
  calibrateGasSensors();
  
  // Connect to WiFi
  connectToWiFi();
  
  Serial.println("\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
  Serial.println("‚ïë        INITIALIZATION COMPLETE - MONITORING STARTED  ‚ïë");
  Serial.println("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n");
}

// ============ MAIN LOOP ============
void loop() {
  unsigned long currentTime = millis();
  
  // Read all sensors and post to Oracle APEX every READ_INTERVAL milliseconds
  if (currentTime - lastReadTime >= READ_INTERVAL) {
    lastReadTime = currentTime;
    postSensorDataToApex();
  }
}

// ============ SENSOR READING FUNCTIONS (for reference/debugging) ============

void readBMP280() {
  float temperature = bmp.readTemperature();
  float pressure = bmp.readPressure() / 100.0F;
  
  if (!baselineSet) {
    baselinePressure = pressure;
    baselineSet = true;
  }
  
  float altitude = bmp.readAltitude(baselinePressure);
  
  Serial.println("üåç BAROMETRIC PRESSURE (BMP280)");
  Serial.print("   Temperature: ");
  Serial.print(temperature, 1);
  Serial.println(" ¬∞C");
  Serial.print("   Pressure: ");
  Serial.print(pressure, 2);
  Serial.println(" hPa");
  Serial.print("   Altitude: ");
  Serial.print(altitude, 1);
  Serial.println(" m");
}

void readDHT22() {
  float humidity = dht.readHumidity();
  float tempC = dht.readTemperature();
  
  if (!isnan(humidity) && !isnan(tempC)) {
    Serial.println("üíß TEMPERATURE & HUMIDITY (DHT22)");
    Serial.print("   Temperature: ");
    Serial.print(tempC, 1);
    Serial.println(" ¬∞C");
    Serial.print("   Humidity: ");
    Serial.print(humidity, 1);
    Serial.println(" %");
  }
}

// ============ CALIBRATION FUNCTION ============
void calibrateGasSensors() {
  Serial.println("Taking baseline readings in clean air...\n");
  
  long sum135 = 0, sum2 = 0, sum7 = 0;
  int samples = 50;
  
  for (int i = 0; i < samples; i++) {
    sum135 += analogRead(MQ135_PIN);
    sum2 += analogRead(MQ2_PIN);
    sum7 += analogRead(MQ7_PIN);
    delay(50);
  }
  
  mq135_baseline = sum135 / samples;
  mq2_baseline = sum2 / samples;
  mq7_baseline = sum7 / samples;
  
  gas_sensors_calibrated = true;
  
  Serial.print("MQ135 Baseline: ");
  Serial.println(mq135_baseline);
  Serial.print("MQ2 Baseline: ");
  Serial.println(mq2_baseline);
  Serial.print("MQ7 Baseline: ");
  Serial.println(mq7_baseline);
  Serial.println("\n‚úì Gas sensor calibration complete!\n");
}

/*
 * WIRING REFERENCE:
 * 
 * Environmental Sensors:
 *   Flame Sensor: GPIO 35 (Analog input)
 *   DHT22: GPIO 16 (Digital input with pull-up)
 *   LDR: GPIO 4 (Analog input)
 * 
 * I2C Devices:
 *   BMP280: SDA=GPIO 21, SCL=GPIO 22
 * 
 * Gas Sensors (IMPORTANT: Use voltage dividers for 5V outputs):
 *   MQ135: GPIO 32 (3.3V compatible)
 *   MQ2: GPIO 33 (5V - USE VOLTAGE DIVIDER)
 *   MQ7: GPIO 14 (5V - USE VOLTAGE DIVIDER)
 *
 * VOLTAGE DIVIDER for 5V sensors:
 *   5V output --[4.7kŒ©]-- GPIO --[10kŒ©]-- GND
 *   This scales 5V down to ~1.65V (safe for ESP32)
 *
 * SETUP INSTRUCTIONS:
 * 1. Install libraries: ArduinoJson, HTTPClient (built-in)
 * 2. Update WiFi credentials (ssid, password)
 * 3. Get Oracle APEX REST endpoint URL and update oracleApexUrl
 * 4. Ensure APEX table column names match JSON field names
 * 5. Upload and monitor serial output
 */
