const int mq2AnalogPin = 34; // Connect the AO pin of your MQ2 module to ESP32 GPIO34
                              // REMEMBER: If MQ2 AO outputs 0-5V, you NEED a voltage divider!
                              // This code assumes the signal entering ESP32 is 0-3.3V.

// --- Calibration Variables ---
int cleanAirBaseline = 0;   // Analog value in clean air
const int gasWarningThreshold = 2000; // <<< ADJUST THIS VALUE after calibration!
const int gasAlarmThreshold = 1000;   // <<< ADJUST THIS VALUE after calibration!

void setup() {
  Serial.begin(115200);
  Serial.println("MQ2 Gas Sensor (LPG) - Analog Output (AO) Test");
  Serial.println("----------------------------------------------");
  Serial.println(">>> IMPORTANT: MQ2 Sensor Pre-heating <<<");
  Serial.println("Allow 20-30 seconds for the sensor to warm up for stable readings.");
  Serial.println("Keep it in clean air during pre-heating.");
  Serial.println("----------------------------------------------");

  // Allow pre-heating time
  for (int i = 0; i < 30; i++) {
    Serial.print("Pre-heating... ");
    Serial.print(30 - i);
    Serial.println("s remaining.");
    delay(1000);
  }
  Serial.println("Pre-heating complete. Now calibrating baseline...");

  // Read baseline in clean air (after pre-heating)
  long sumReadings = 0;
  for (int i = 0; i < 100; i++) { // Take 100 readings for an average baseline
    sumReadings += analogRead(mq2AnalogPin);
    delay(10);
  }
  cleanAirBaseline = sumReadings / 100;
  Serial.print("Clean Air Baseline (AO): ");
  Serial.println(cleanAirBaseline);
  Serial.println("----------------------------------------------");
  Serial.println("Now observing gas levels. Introduce gas carefully for calibration.");
  Serial.println("----------------------------------------------");
}

void loop() {
  int gasRawValue = analogRead(mq2AnalogPin);
  Serial.print("Current Gas Raw Value (AO): ");
  Serial.println(gasRawValue);

  // --- INTERPRETATION LOGIC (Adjust based on your sensor's behavior) ---
  // Most MQ2 modules: HIGHER gas concentration -> LOWER analogRead value.
  // This means if gasRawValue drops significantly below cleanAirBaseline, gas is detected.

  if (gasRawValue < gasAlarmThreshold) {
    Serial.println("!!! DANGEROUS GAS LEAK DETECTED (ALARM LEVEL) !!!");
    // Valuable Insight: Critical Alert
    // Actions: Trigger loud siren, cut power to gas line (if automated),
    //          send urgent notifications to multiple contacts, log event with high priority.
  } else if (gasRawValue < gasWarningThreshold) {
    Serial.println(">> Warning: Elevated Gas Concentration Detected <<");
    // Valuable Insight: Precautionary Alert
    // Actions: Send mild notification, activate ventilation fan,
    //          log event, display visual warning (LED).
  } else if (gasRawValue < cleanAirBaseline - 100 && gasRawValue > gasWarningThreshold) { // Slight variation from baseline
     Serial.println("Slight increase in gas detected.");
     // Valuable Insight: Minor fluctuation
     // Actions: Log for trend analysis, but no immediate alert.
  }
  else {
    Serial.println("Gas level is safe.");
  }

  Serial.println(); // Blank line for readability
  delay(1000);      // Read every second
}
