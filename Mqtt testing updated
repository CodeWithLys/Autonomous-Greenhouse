/*
 * ============================================================================
 * UNIFIED GREENHOUSE SENSOR MONITORING SYSTEM - DUAL OUTPUT
 * ============================================================================
 * IFS325 Group Project - ARC Smart Agriculture
 * ESP32 Version - All Sensors with MQTT + HTTP API Publishing
 * 
 * SENSORS INTEGRATED:
 *   - BMP280: Barometric pressure, temperature, altitude
 *   - DHT22: Temperature and humidity
 *   - Flame Sensor: Fire detection (calibrated)
 *   - LDR: Ambient light measurement (calibrated)
 *   - MQ135: CO2 and air quality
 *   - MQ2: LPG and smoke detection
 *   - MQ7: Carbon monoxide detection
 * 
 * OUTPUT METHODS:
 *   - MQTT Publishing (Real-time streaming)
 *   - HTTP POST to Oracle APEX API (Database storage)
 * 
 * AUTHOR: ARC Smart Agriculture Team
 * VERSION: 3.0 - Unified MQTT + API Edition
 * ============================================================================
 */

#include "Arduino.h"
#include <Wire.h>
#include <Adafruit_BMP280.h>
#include "DHT.h"
#include <WiFi.h>
#include <PubSubClient.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>

// ============================================================================
// CONFIGURATION SECTION - EDIT THESE VALUES
// ============================================================================

// WiFi Credentials
const char* WIFI_SSID = "2024";
const char* WIFI_PASSWORD = "2024@uwc";

// MQTT Broker Configuration
const char* MQTT_BROKER = "172.17.131.50";
const int MQTT_PORT = 1883;
const char* MQTT_TOPIC = "greenhouse/sensor_data";
const char* MQTT_CLIENT_ID = "ESP32_Greenhouse_01";

// HTTP API Configuration
const char* API_URL = "https://apex.oracle.com/pls/apex/your_workspace/sensor-data";

// Enable/Disable Output Methods
const bool ENABLE_MQTT = true;      // Set to false to disable MQTT
const bool ENABLE_HTTP_API = true;  // Set to false to disable HTTP POST

// ============================================================================
// PIN DEFINITIONS
// ============================================================================

#define FLAME_SENSOR_PIN 35
#define DHT_PIN 16
#define LDR_PIN 34
#define DHTTYPE DHT22

#define SDA_PIN 21
#define SCL_PIN 22

#define MQ135_PIN 32
#define MQ2_PIN 33
#define MQ7_PIN 39

// ============================================================================
// SENSOR OBJECT INITIALIZATION
// ============================================================================

Adafruit_BMP280 bmp;
DHT dht(DHT_PIN, DHTTYPE);
WiFiClient espClient;
PubSubClient mqttClient(espClient);

// ============================================================================
// CALIBRATION & THRESHOLD CONSTANTS
// ============================================================================

const float PRESSURE_NORMAL = 1013.25;
float baselinePressure = PRESSURE_NORMAL;
bool baselineSet = false;

// Flame sensor calibration
int FLAME_THRESHOLD = 2000;  // Raw > 2000 = flame detected
bool flame_calibrated = false;

// LDR calibration
int ldr_min = 0;
int ldr_max = 4095;
bool ldr_calibrated = false;

// Gas sensor baselines
int mq135_baseline = 0;
int mq2_baseline = 0;
int mq7_baseline = 0;
bool gas_sensors_calibrated = false;

// ============================================================================
// TIMING CONTROL
// ============================================================================

unsigned long lastReadTime = 0;
const long READ_INTERVAL = 10000;  // 10 seconds

unsigned long lastMqttReconnectAttempt = 0;
const long MQTT_RECONNECT_INTERVAL = 5000;

// ============================================================================
// SENSOR DATA STRUCTURE
// ============================================================================

struct SensorData {
  // Environmental readings
  float temp_bmp280;
  float temp_dht22;
  float pressure;
  float altitude;
  float humidity;
  
  // Analog sensor readings
  int flame_raw;
  int flame_detected;     // 1 = flame detected, 0 = no flame
  int light_raw;
  float light_percent;    // 0-100% brightness
  
  // Gas sensor readings
  int mq135_raw;
  int mq135_baseline;
  int mq135_drop;
  
  int mq2_raw;
  int mq2_baseline;
  int mq2_drop;
  
  int mq7_raw;
  int mq7_baseline;
  int mq7_drop;
  
  bool valid;
};

// ============================================================================
// SETUP FUNCTION
// ============================================================================

void setup() {
  Serial.begin(115200);
  delay(1000);
  
  printStartupBanner();
  
  // Initialize I2C
  Wire.begin(SDA_PIN, SCL_PIN);
  
  // Initialize BMP280
  if (!bmp.begin(0x76)) {
    if (!bmp.begin(0x77)) {
      Serial.println("❌ FATAL ERROR: BMP280 sensor not found!");
      while (1) delay(10);
    }
  }
  
  bmp.setSampling(Adafruit_BMP280::MODE_NORMAL,
                  Adafruit_BMP280::SAMPLING_X2,
                  Adafruit_BMP280::SAMPLING_X16,
                  Adafruit_BMP280::FILTER_X16,
                  Adafruit_BMP280::STANDBY_MS_500);
  Serial.println("✓ BMP280 initialized successfully");
  
  // Initialize DHT22
  dht.begin();
  Serial.println("✓ DHT22 initialized successfully");
  
  // Configure analog pins
  pinMode(FLAME_SENSOR_PIN, INPUT);
  pinMode(LDR_PIN, INPUT);
  pinMode(MQ135_PIN, INPUT);
  pinMode(MQ2_PIN, INPUT);
  pinMode(MQ7_PIN, INPUT);
  Serial.println("✓ Analog sensor pins configured");
  
  // Connect to WiFi
  connectToWiFi();
  
  // Configure MQTT if enabled
  if (ENABLE_MQTT) {
    mqttClient.setServer(MQTT_BROKER, MQTT_PORT);
    mqttClient.setBufferSize(1024);
    Serial.println("✓ MQTT client configured (buffer: 1024 bytes)");
    reconnectMqtt();
  }
  
  // Calibrate flame sensor
  calibrateFlame();
  
  // Calibrate LDR
  calibrateLDR();
  
  // Calibrate gas sensors
  calibrateGasSensors();
  
  Serial.println("\n╔══════════════════════════════════════════════════════╗");
  Serial.println("║     INITIALIZATION COMPLETE - MONITORING STARTED     ║");
  Serial.println("╚══════════════════════════════════════════════════════╝\n");
  
  printOutputStatus();
}

// ============================================================================
// MAIN LOOP
// ============================================================================

void loop() {
  // Check WiFi connection
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("⚠ WiFi disconnected. Attempting reconnection...");
    connectToWiFi();
  }
  
  // Maintain MQTT connection if enabled
  if (ENABLE_MQTT) {
    if (!mqttClient.connected()) {
      unsigned long now = millis();
      if (now - lastMqttReconnectAttempt > MQTT_RECONNECT_INTERVAL) {
        lastMqttReconnectAttempt = now;
        reconnectMqtt();
      }
    } else {
      mqttClient.loop();
    }
  }
  
  // Read and publish sensor data at intervals
  unsigned long currentTime = millis();
  if (currentTime - lastReadTime >= READ_INTERVAL) {
    lastReadTime = currentTime;
    
    printCycleHeader(currentTime);
    
    // Read all sensors
    SensorData data = readAllSensors();
    
    if (data.valid) {
      // Publish to MQTT if enabled
      if (ENABLE_MQTT && mqttClient.connected()) {
        publishMqttMessage(data);
      }
      
      // Send to HTTP API if enabled
      if (ENABLE_HTTP_API) {
        sendDataToAPI(data);
      }
    } else {
      Serial.println("❌ Sensor data invalid - skipping transmission");
    }
    
    Serial.println("\n════════════════════════════════════════════════════════\n");
  }
  
  delay(10);
}

// ============================================================================
// WIFI CONNECTION FUNCTION
// ============================================================================

void connectToWiFi() {
  Serial.print("Connecting to WiFi: ");
  Serial.print(WIFI_SSID);
  
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 20) {
    delay(500);
    Serial.print(".");
    attempts++;
  }
  
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\n✓ WiFi connected successfully");
    Serial.print("   IP Address: ");
    Serial.println(WiFi.localIP());
    Serial.print("   Signal Strength: ");
    Serial.print(WiFi.RSSI());
    Serial.println(" dBm");
  } else {
    Serial.println("\n❌ WiFi connection failed - will retry");
  }
}

// ============================================================================
// MQTT RECONNECTION FUNCTION
// ============================================================================

void reconnectMqtt() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("⚠ Cannot connect to MQTT - WiFi not available");
    return;
  }
  
  Serial.print("Attempting MQTT connection to ");
  Serial.print(MQTT_BROKER);
  Serial.print(":");
  Serial.print(MQTT_PORT);
  Serial.print(" ... ");
  
  if (mqttClient.connect(MQTT_CLIENT_ID)) {
    Serial.println("✓ Connected!");
    Serial.print("   Client ID: ");
    Serial.println(MQTT_CLIENT_ID);
    Serial.print("   Publishing to: ");
    Serial.println(MQTT_TOPIC);
  } else {
    Serial.print("❌ Failed, rc=");
    Serial.println(mqttClient.state());
  }
}

// ============================================================================
// FLAME SENSOR CALIBRATION
// ============================================================================

void calibrateFlame() {
  Serial.println("\n╔══════════════════════════════════════════════════════╗");
  Serial.println("║          FLAME SENSOR CALIBRATION                    ║");
  Serial.println("╚══════════════════════════════════════════════════════╝");
  Serial.println("🔥 Calibrating flame sensor...");
  Serial.println("   Ensure NO flames are present during calibration");
  delay(2000);
  
  long sum = 0;
  int samples = 30;
  
  Serial.println("   Taking 30 samples...");
  for (int i = 0; i < samples; i++) {
    sum += analogRead(FLAME_SENSOR_PIN);
    delay(50);
  }
  
  int ambient_baseline = sum / samples;
  
  Serial.print("   Ambient baseline: ");
  Serial.println(ambient_baseline);
  Serial.println("   Threshold: 2000 ADC units");
  Serial.println("   Logic: Raw > 2000 = FLAME DETECTED");
  Serial.println("          Raw < 2000 = NO FLAME");
  Serial.println("   ✓ Flame sensor ready\n");
  
  flame_calibrated = true;
}

// ============================================================================
// LDR CALIBRATION
// ============================================================================

void calibrateLDR() {
  Serial.println("╔══════════════════════════════════════════════════════╗");
  Serial.println("║          LDR (LIGHT SENSOR) CALIBRATION              ║");
  Serial.println("╚══════════════════════════════════════════════════════╝");
  Serial.println("💡 Measuring ambient light range...");
  delay(2000);
  
  int minVal = 4095;
  int maxVal = 0;
  int samples = 50;
  
  Serial.println("   Sampling for 2.5 seconds...");
  for (int i = 0; i < samples; i++) {
    int reading = analogRead(LDR_PIN);
    if (reading < minVal) minVal = reading;
    if (reading > maxVal) maxVal = reading;
    delay(50);
  }
  
  ldr_min = max(0, minVal - 100);
  ldr_max = min(4095, maxVal + 100);
  ldr_calibrated = true;
  
  Serial.print("   LDR range: ");
  Serial.print(ldr_min);
  Serial.print(" - ");
  Serial.println(ldr_max);
  Serial.println("   ✓ LDR calibrated\n");
}

// ============================================================================
// GAS SENSOR CALIBRATION
// ============================================================================

void calibrateGasSensors() {
  Serial.println("\n╔══════════════════════════════════════════════════════╗");
  Serial.println("║           GAS SENSOR CALIBRATION PHASE               ║");
  Serial.println("╚══════════════════════════════════════════════════════╝");
  Serial.println("⚠ IMPORTANT: Ensure all gas sensors are in CLEAN AIR");
  Serial.println("\nWarming up sensors for 300 seconds (5 minutes)...\n");
  
  for (int i = 300; i > 0; i--) {
    if (i % 30 == 0) {
      Serial.print("⏱ Warm-up countdown: ");
      Serial.print(i);
      Serial.println(" seconds remaining...");
    }
    delay(1000);
  }
  
  Serial.println("\nTaking baseline readings in clean air...");
  
  long sum135 = 0, sum2 = 0, sum7 = 0;
  const int samples = 50;
  
  for (int i = 0; i < samples; i++) {
    sum135 += analogRead(MQ135_PIN);
    sum2 += analogRead(MQ2_PIN);
    sum7 += analogRead(MQ7_PIN);
    delay(50);
  }
  
  mq135_baseline = sum135 / samples;
  mq2_baseline = sum2 / samples;
  mq7_baseline = sum7 / samples;
  gas_sensors_calibrated = true;
  
  Serial.println("\n✓ CALIBRATION COMPLETE");
  Serial.print("   MQ135 Baseline: ");
  Serial.println(mq135_baseline);
  Serial.print("   MQ2 Baseline: ");
  Serial.println(mq2_baseline);
  Serial.print("   MQ7 Baseline: ");
  Serial.println(mq7_baseline);
  Serial.println();
}

// ============================================================================
// READ ALL SENSORS FUNCTION
// ============================================================================

SensorData readAllSensors() {
  SensorData data;
  data.valid = true;
  
  // ---- BMP280 READINGS ----
  data.temp_bmp280 = bmp.readTemperature();
  data.pressure = bmp.readPressure() / 100.0F;
  
  if (!baselineSet) {
    baselinePressure = data.pressure;
    baselineSet = true;
  }
  
  data.altitude = bmp.readAltitude(baselinePressure);
  
  Serial.println("🌍 BAROMETRIC PRESSURE (BMP280)");
  Serial.print("   Temperature: ");
  Serial.print(data.temp_bmp280, 1);
  Serial.println(" °C");
  Serial.print("   Pressure: ");
  Serial.print(data.pressure, 2);
  Serial.println(" hPa");
  Serial.print("   Altitude: ");
  Serial.print(data.altitude, 1);
  Serial.println(" m");
  
  // ---- DHT22 READINGS ----
  data.humidity = dht.readHumidity();
  data.temp_dht22 = dht.readTemperature();
  
  if (isnan(data.humidity) || isnan(data.temp_dht22)) {
    Serial.println("💧 TEMPERATURE & HUMIDITY (DHT22)");
    Serial.println("   ❌ Sensor read error!");
    data.valid = false;
    return data;
  }
  
  Serial.println("💧 TEMPERATURE & HUMIDITY (DHT22)");
  Serial.print("   Temperature: ");
  Serial.print(data.temp_dht22, 1);
  Serial.println(" °C");
  Serial.print("   Humidity: ");
  Serial.print(data.humidity, 1);
  Serial.println(" %");
  
  // ---- FLAME SENSOR ----
  data.flame_raw = analogRead(FLAME_SENSOR_PIN);
  
  // FLAME DETECTION LOGIC: Raw > 2000 = FLAME DETECTED
  if (data.flame_raw > FLAME_THRESHOLD) {
    data.flame_detected = 1;  // Flame detected
  } else {
    data.flame_detected = 0;  // No flame
  }
  
  Serial.println("🔥 FLAME DETECTION SENSOR");
  Serial.print("   Raw Value: ");
  Serial.print(data.flame_raw);
  Serial.print(" (Threshold: ");
  Serial.print(FLAME_THRESHOLD);
  Serial.println(")");
  Serial.print("   Status: ");
  if (data.flame_detected == 1) {
    Serial.println("⚠⚠ FLAME DETECTED ⚠⚠");
  } else {
    Serial.println("✓ No flame detected");
  }
  
  // ---- LIGHT SENSOR (LDR) ----
  data.light_raw = analogRead(LDR_PIN);
  
  // Calculate brightness percentage
  if (ldr_calibrated) {
    data.light_percent = map(data.light_raw, ldr_min, ldr_max, 0, 100);
    data.light_percent = constrain(data.light_percent, 0, 100);
  } else {
    data.light_percent = map(data.light_raw, 0, 4095, 0, 100);
  }
  
  Serial.println("💡 AMBIENT LIGHT SENSOR (LDR)");
  Serial.print("   Raw Value: ");
  Serial.print(data.light_raw);
  Serial.print(" (");
  Serial.print(data.light_percent, 1);
  Serial.println("% brightness)");
  
  // ---- MQ135 GAS SENSOR ----
  data.mq135_raw = analogRead(MQ135_PIN);
  data.mq135_baseline = mq135_baseline;
  data.mq135_drop = data.mq135_raw - mq135_baseline;
  
  Serial.println("🌫️  MQ135 - CO2/AIR QUALITY");
  Serial.print("   Raw: ");
  Serial.print(data.mq135_raw);
  Serial.print(" | Baseline: ");
  Serial.print(data.mq135_baseline);
  Serial.print(" | Drop: ");
  Serial.println(data.mq135_drop);
  
  // ---- MQ2 GAS SENSOR ----
  data.mq2_raw = analogRead(MQ2_PIN);
  data.mq2_baseline = mq2_baseline;
  data.mq2_drop = data.mq2_raw - mq2_baseline;
  
  Serial.println("💨 MQ2 - LPG/SMOKE DETECTION");
  Serial.print("   Raw: ");
  Serial.print(data.mq2_raw);
  Serial.print(" | Baseline: ");
  Serial.print(data.mq2_baseline);
  Serial.print(" | Drop: ");
  Serial.println(data.mq2_drop);
  
  // ---- MQ7 GAS SENSOR ----
  data.mq7_raw = analogRead(MQ7_PIN);
  data.mq7_baseline = mq7_baseline;
  data.mq7_drop = data.mq7_raw - mq7_baseline;
  
  Serial.println("☠️  MQ7 - CARBON MONOXIDE (CO)");
  Serial.print("   Raw: ");
  Serial.print(data.mq7_raw);
  Serial.print(" | Baseline: ");
  Serial.print(data.mq7_baseline);
  Serial.print(" | Drop: ");
  Serial.println(data.mq7_drop);
  
  return data;
}

// ============================================================================
// PUBLISH TO MQTT
// ============================================================================

void publishMqttMessage(SensorData data) {
  JsonDocument doc;
  
  doc["timestamp"] = millis() / 1000;
  
  doc["temperature_bmp280"] = round(data.temp_bmp280 * 100) / 100.0;
  doc["temperature_dht22"] = round(data.temp_dht22 * 100) / 100.0;
  doc["pressure"] = round(data.pressure * 100) / 100.0;
  doc["altitude"] = round(data.altitude * 100) / 100.0;
  doc["humidity"] = round(data.humidity * 100) / 100.0;
  
  doc["flame_raw"] = data.flame_raw;
  doc["flame_detected"] = data.flame_detected;
  doc["light_raw"] = data.light_raw;
  doc["light_percent"] = round(data.light_percent * 100) / 100.0;
  
  doc["mq135_raw"] = data.mq135_raw;
  doc["mq135_baseline"] = data.mq135_baseline;
  doc["mq135_drop"] = data.mq135_drop;
  
  doc["mq2_raw"] = data.mq2_raw;
  doc["mq2_baseline"] = data.mq2_baseline;
  doc["mq2_drop"] = data.mq2_drop;
  
  doc["mq7_raw"] = data.mq7_raw;
  doc["mq7_baseline"] = data.mq7_baseline;
  doc["mq7_drop"] = data.mq7_drop;
  
  String jsonString;
  serializeJson(doc, jsonString);
  
  Serial.println("\n📤 MQTT PUBLISH:");
  Serial.println(jsonString);
  Serial.print("   Size: ");
  Serial.print(jsonString.length());
  Serial.println(" bytes");
  
  if (mqttClient.publish(MQTT_TOPIC, jsonString.c_str())) {
    Serial.println("   ✓ Successfully published to MQTT broker");
  } else {
    Serial.println("   ❌ MQTT publish failed");
  }
}

// ============================================================================
// SEND TO HTTP API
// ============================================================================

void sendDataToAPI(SensorData data) {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("❌ Cannot send to API - WiFi not connected");
    return;
  }
  
  JsonDocument doc;
  
  doc["timestamp"] = millis() / 1000;
  
  doc["temperature_bmp280"] = round(data.temp_bmp280 * 100) / 100.0;
  doc["temperature_dht22"] = round(data.temp_dht22 * 100) / 100.0;
  doc["pressure"] = round(data.pressure * 100) / 100.0;
  doc["altitude"] = round(data.altitude * 100) / 100.0;
  doc["humidity"] = round(data.humidity * 100) / 100.0;
  
  doc["flame_raw"] = data.flame_raw;
  doc["flame_detected"] = data.flame_detected;
  doc["light_raw"] = data.light_raw;
  doc["light_percent"] = round(data.light_percent * 100) / 100.0;
  
  doc["mq135_raw"] = data.mq135_raw;
  doc["mq135_baseline"] = data.mq135_baseline;
  doc["mq135_drop"] = data.mq135_drop;
  
  doc["mq2_raw"] = data.mq2_raw;
  doc["mq2_baseline"] = data.mq2_baseline;
  doc["mq2_drop"] = data.mq2_drop;
  
  doc["mq7_raw"] = data.mq7_raw;
  doc["mq7_baseline"] = data.mq7_baseline;
  doc["mq7_drop"] = data.mq7_drop;
  
  String jsonPayload;
  serializeJson(doc, jsonPayload);
  
  HTTPClient http;
  
  Serial.println("\n📡 HTTP POST TO API:");
  Serial.print("   URL: ");
  Serial.println(API_URL);
  Serial.print("   Payload size: ");
  Serial.print(jsonPayload.length());
  Serial.println(" bytes");
  
  http.begin(API_URL);
  http.addHeader("Content-Type", "application/json");
  
  int httpResponseCode = http.POST(jsonPayload);
  
  if (httpResponseCode > 0) {
    Serial.print("   ✓ HTTP Response: ");
    Serial.println(httpResponseCode);
    
    String response = http.getString();
    if (response.length() > 0) {
      Serial.print("   Response: ");
      Serial.println(response);
    }
    
    if (httpResponseCode == 200 || httpResponseCode == 201) {
      Serial.println("   ✓ Data successfully sent to API!");
    }
  } else {
    Serial.print("   ❌ HTTP Error: ");
    Serial.println(httpResponseCode);
    Serial.print("   Error: ");
    Serial.println(http.errorToString(httpResponseCode).c_str());
  }
  
  http.end();
}

// ============================================================================
// HELPER FUNCTIONS
// ============================================================================

void printStartupBanner() {
  Serial.println("\n\n╔══════════════════════════════════════════════════════╗");
  Serial.println("║   GREENHOUSE SENSOR SYSTEM - DUAL OUTPUT EDITION    ║");
  Serial.println("║   IFS325 Group Project - ARC Smart Agriculture       ║");
  Serial.println("║   Version 3.0 - MQTT + HTTP API Integration          ║");
  Serial.println("╚══════════════════════════════════════════════════════╝\n");
}

void printCycleHeader(unsigned long currentTime) {
  Serial.println("\n╔══════════════════════════════════════════════════════╗");
  Serial.println("║              SENSOR READING CYCLE                    ║");
  Serial.print("║ Uptime: ");
  Serial.print(currentTime / 1000);
  Serial.println(" seconds                                  ║");
  Serial.println("╚══════════════════════════════════════════════════════╝\n");
}

void printOutputStatus() {
  Serial.println("\n╔══════════════════════════════════════════════════════╗");
  Serial.println("║              OUTPUT CONFIGURATION                    ║");
  Serial.println("╚══════════════════════════════════════════════════════╝");
  Serial.print("   MQTT Publishing: ");
  Serial.println(ENABLE_MQTT ? "ENABLED ✓" : "DISABLED ✗");
  Serial.print("   HTTP API: ");
  Serial.println(ENABLE_HTTP_API ? "ENABLED ✓" : "DISABLED ✗");
  Serial.println();
}

/*
 * ============================================================================
 * CONFIGURATION GUIDE
 * ============================================================================
 * 
 * 1. WIFI SETTINGS (Lines 50-51):
 *    const char* WIFI_SSID = "Your_Network";
 *    const char* WIFI_PASSWORD = "Your_Password";
 * 
 * 2. MQTT SETTINGS (Lines 54-57):
 *    const char* MQTT_BROKER = "192.168.1.100";
 *    const int MQTT_PORT = 1883;
 *    const char* MQTT_TOPIC = "greenhouse/sensor_data";
 *    const char* MQTT_CLIENT_ID = "ESP32_Greenhouse_01";
 * 
 * 3. HTTP API SETTINGS (Line 60):
 *    const char* API_URL = "https://your-api-endpoint.com/sensor-data";
 * 
 * 4. ENABLE/DISABLE OUTPUTS (Lines 63-64):
 *    const bool ENABLE_MQTT = true;
 *    const bool ENABLE_HTTP_API = true;
 * 
 * ============================================================================
 * FLAME SENSOR LOGIC
 * ============================================================================
 * 
 * DETECTION RULE:
 *   - Raw value > 2000  →  flame_detected = 1 (FLAME DETECTED)
 *   - Raw value <= 2000 →  flame_detected = 0 (NO FLAME)
 * 
 * JSON OUTPUT:
 *   {
 *     "flame_raw": 2543,
 *     "flame_detected": 1
 *   }
 * 
 * ============================================================================
 * REQUIRED LIBRARIES
 * ============================================================================
 * 
 * Install via Arduino Library Manager:
 *   - Adafruit BMP280 Library
 *   - DHT sensor library
 *   - PubSubClient (for MQTT)
 *   - ArduinoJson (version 7.x)
 * 
 * Built-in libraries (no installation needed):
 *   - WiFi.h
 *   - HTTPClient.h
 *   - Wire.h
 * 
 * ============================================================================
 */
