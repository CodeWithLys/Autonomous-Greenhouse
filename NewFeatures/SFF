#include <ESP32Servo.h>
#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>

// --- Pin Definitions ---
const int servoPin = 18;             // GPIO 18 for servo
const int flameSensorAO = 17;        // GPIO 17 - Analog Output from flame sensor
const int flameSensorDO = 16;        // GPIO 16 - Digital Output from flame sensor (LED indicator)
const int RELAY_PIN = 2;             // GPIO pin for relay

// --- BLE Variables ---
BLEServer* pServer = NULL;
BLECharacteristic* pCharacteristic = NULL;
bool deviceConnected = false;

#define SERVICE_UUID        "4fafc201-1fb5-459e-8fcc-c5c9c331914b"
#define CHARACTERISTIC_UUID "beb5483e-36e1-4688-b7f5-ea07361b26a8"

// --- Servo Configuration ---
Servo myServo;
const int VENT_OPEN_ANGLE = 180;   // Servo angle for vents open (180 degrees)
const int VENT_CLOSED_ANGLE = 90;  // Servo angle for vents closed (90 degrees)

// --- Flame Sensor Configuration ---
#define TEST_MODE false  // Set to true to disable flame detection for servo testing
#define CALIBRATION_TIME 5000  // 5 seconds calibration period on startup
#define FLAME_CONFIRM_TIME 3000  // Require 3 seconds of continuous flame detection
#define SAFE_CONFIRM_TIME 2000   // Require 2 seconds of no flame before clearing alarm

unsigned long flameDetectedStartTime = 0;  // When flame was first detected
unsigned long safeDetectedStartTime = 0;   // When safe state was first detected
bool flameAlarmActive = false;             // Is the alarm currently active?
bool isCalibrating = true;                 // Calibration mode on startup

class MyServerCallbacks: public BLEServerCallbacks {
    void onConnect(BLEServer* pServer) {
      deviceConnected = true;
    };
    void onDisconnect(BLEServer* pServer) {
      deviceConnected = false;
      pServer->startAdvertising();
    }
};

void sendOutput(String message) {
  Serial.print(message);
  if (deviceConnected) {
    pCharacteristic->setValue(message.c_str());
    pCharacteristic->notify();
  }
}

void setup() {
  Serial.begin(115200);
  delay(1000);
  
  sendOutput("=== GREENHOUSE CONTROL SYSTEM ===\n");
  sendOutput("Initializing...\n\n");

  // Attach servo FIRST before BLE
  sendOutput("Attaching servo to GPIO 18...\n");
  myServo.attach(servoPin, 500, 2400);
  delay(500);
  
  // Test servo immediately
  sendOutput("Testing servo...\n");
  myServo.write(90);
  sendOutput("Servo set to 90 degrees (CLOSED)\n");
  delay(1000);
  myServo.write(180);
  sendOutput("Servo set to 180 degrees (OPEN)\n");
  delay(1000);
  myServo.write(90);
  sendOutput("Servo back to 90 degrees (CLOSED)\n");
  delay(1000);

  // Setup BLE AFTER servo test
  sendOutput("Starting BLE...\n");
  BLEDevice::init("Greenhouse_Monitor");
  pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());
  BLEService *pService = pServer->createService(SERVICE_UUID);
  pCharacteristic = pService->createCharacteristic(
                      CHARACTERISTIC_UUID,
                      BLECharacteristic::PROPERTY_READ |
                      BLECharacteristic::PROPERTY_NOTIFY
                    );
  pCharacteristic->addDescriptor(new BLE2902());
  pService->start();
  BLEAdvertising *pAdvertising = BLEDevice::getAdvertising();
  pAdvertising->addServiceUUID(SERVICE_UUID);
  pAdvertising->setScanResponse(false);
  pAdvertising->setMinPreferred(0x0);
  BLEDevice::startAdvertising();
  sendOutput("BLE started successfully\n\n");

  // Setup relay on GPIO 2
  pinMode(RELAY_PIN, OUTPUT);
  digitalWrite(RELAY_PIN, HIGH); // Fan OFF initially

  // Setup flame sensor pins
  pinMode(flameSensorAO, INPUT);   // Analog input
  pinMode(flameSensorDO, INPUT);   // Digital input (LED indicator)

  // Initial state: Vents OPEN, Fan ON
  myServo.write(VENT_OPEN_ANGLE);
  digitalWrite(RELAY_PIN, LOW); // Fan ON
  
  if (TEST_MODE) {
    sendOutput("‚ö†Ô∏è  TEST MODE ENABLED - Flame sensor disabled ‚ö†Ô∏è\n\n");
    isCalibrating = false;
  } else {
    sendOutput("üîß CALIBRATING SENSOR - Please wait 5 seconds...\n");
    sendOutput("Keep sensor away from any flames during calibration.\n\n");
  }
  
  sendOutput("Status: NORMAL\n");
  sendOutput("Vents: OPEN (180¬∞)\n");
  sendOutput("Fan: Controlled by button\n\n");
}

void loop() {
  unsigned long currentTime = millis();
  
  // Handle calibration period
  if (isCalibrating) {
    if (currentTime < CALIBRATION_TIME) {
      // Still calibrating - just show sensor values
      int flameValueAO = analogRead(flameSensorAO);
      int flameValueDO = digitalRead(flameSensorDO);
      
      String sensorMsg = "Calibrating... AO: " + String(flameValueAO) + 
                         " | DO: " + String(flameValueDO) + 
                         " | Time left: " + String((CALIBRATION_TIME - currentTime) / 1000) + "s\n";
      sendOutput(sensorMsg);
      delay(500);
      return;
    } else {
      // Calibration complete
      isCalibrating = false;
      sendOutput("\n‚úì Calibration complete! System active.\n\n");
    }
  }

  int flameValueAO = analogRead(flameSensorAO);
  int flameValueDO = digitalRead(flameSensorDO);  // LOW (0) when flame detected (LED ON)

  // Send sensor readings
  String sensorMsg = "Flame Sensor - AO: " + String(flameValueAO) + 
                     " | DO: " + String(flameValueDO) + 
                     " (LED: " + String(flameValueDO == LOW ? "ON" : "OFF") + ")";
  
  if (!TEST_MODE) {
    if (flameValueDO == LOW) {
      // Flame detected right now
      if (flameDetectedStartTime == 0) {
        // First time detecting flame - start the timer
        flameDetectedStartTime = currentTime;
        sensorMsg += " [Flame detected - confirming...]\n";
      } else {
        // Flame has been detected before - check how long
        unsigned long flameDuration = currentTime - flameDetectedStartTime;
        if (flameDuration >= FLAME_CONFIRM_TIME && !flameAlarmActive) {
          // Flame confirmed for required time - TRIGGER ALARM
          flameAlarmActive = true;
          myServo.write(VENT_CLOSED_ANGLE);
          digitalWrite(RELAY_PIN, HIGH); // Fan OFF
          sendOutput("\n‚ö†Ô∏è  FLAME DETECTED! ‚ö†Ô∏è\n");
          sendOutput("Vents: CLOSED (90¬∞)\n");
          sendOutput("Fan: OFF\n\n");
        } else if (!flameAlarmActive) {
          sensorMsg += " [Confirming: " + String(flameDuration / 1000) + "s/" + 
                      String(FLAME_CONFIRM_TIME / 1000) + "s]\n";
        } else {
          sensorMsg += " [ALARM ACTIVE]\n";
        }
      }
      // Reset safe timer since we're detecting flame
      safeDetectedStartTime = 0;
      
    } else {
      // No flame detected right now (DO is HIGH, LED is OFF)
      if (flameAlarmActive) {
        // Alarm is active but no flame now - start safe confirmation timer
        if (safeDetectedStartTime == 0) {
          safeDetectedStartTime = currentTime;
          sensorMsg += " [Checking if safe...]\n";
        } else {
          unsigned long safeDuration = currentTime - safeDetectedStartTime;
          if (safeDuration >= SAFE_CONFIRM_TIME) {
            // Confirmed safe for required time - CLEAR ALARM
            flameAlarmActive = false;
            flameDetectedStartTime = 0;
            safeDetectedStartTime = 0;
            myServo.write(VENT_OPEN_ANGLE);
            digitalWrite(RELAY_PIN, LOW); // Fan ON
            sendOutput("\n‚úì System Safe\n");
            sendOutput("Vents: OPEN (180¬∞)\n");
            sendOutput("Fan: ON\n\n");
          } else {
            sensorMsg += " [Confirming safe: " + String(safeDuration / 1000) + "s/" + 
                        String(SAFE_CONFIRM_TIME / 1000) + "s]\n";
          }
        }
      } else {
        sensorMsg += " [Normal]\n";
        // Reset timers
        flameDetectedStartTime = 0;
        safeDetectedStartTime = 0;
      }
    }
  } else {
    sensorMsg += " [TEST MODE]\n";
  }
  
  sendOutput(sensorMsg);
  delay(500); // Check every 0.5 seconds
}
